# -*- coding: CP936 -*-
# Ê±¼ä+¿Õ¼ä·¶Î§ËÑË÷
# generated by wxGlade 0.6.8 (standalone edition) on Tue Dec 17 14:25:22 2013
#

import wx

# begin wxGlade: dependencies
# end wxGlade
# begin wxGlade: extracode
# end wxGlade
import show_shapefile

"""#class p1(wx.Panel):
    #def __init__(self,parent):
        #wx.Panel.__init__(self,parent, -1,size=(400,400))
        #self.sizer = wx.BoxSizer(wx.VERTICAL)
        #self.figure = matplotlib.figure.Figure(figsize=(5,4))
        #self.axes = self.figure.add_subplot(111)
        
        ##self.canvas = FigureCanvasWxAgg(self, -1, self.figure)

        #self.y_max = 10
        #self.canvas = FigureCanvasWxAgg(self,-1,self.figure)
        #self.canvas.SetBackgroundColour("Red")  
        #self.axes.set_axis_off()
        #self.axes.grid(True)
        #self.axes.set_autoscale_on(True)
        ##self.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_BACKGROUND ))
        #self.SetForegroundColour(wx.SystemSettings.GetColour( wx.SYS_COLOUR_3DLIGHT ))
        ##self.toolbar = Toolbar(self.canvas) #matplotlib toolbar
        ##self.toolbar.Realize()                 
        #self.sizer.Add(self.canvas,proportion =1, border = 5,flag = wx.ALL | wx.EXPAND)
        #self.SetSizer(self.sizer)
        ##self.Fit()

    ##----------------------------------------------------------------------
    #def getShpType(self,file_path):
        #""""""
        #source = ogr.Open(file_path)       
        #layer = source.GetLayerByIndex(0)    
        #feature = layer.GetNextFeature()
        #geom = feature.GetGeometryRef()
        #geom_type = geom.GetGeometryName()  
        #return geom_type
        
    ##----------------------------------------------------------------------
    #def plotShpPointByFile(self, file_path):
        #""""""
        #shape_BLL.shapely_point.plotShpByFile(self.axes, file_path)       
        #self.axes.set_title('point')     
        #self.canvas.draw()
        #pass
    ##----------------------------------------------------------------------
    #def plotShpLineByFile(self,file_path,color = "black",linewidth=1):
        #""""""
        #shape_BLL.shapely_linestring.plotShapeByFile(self.axes, file_path)        
        #self.axes.set_title('polyline')     
        #self.canvas.draw()        
        #pass
    ##----------------------------------------------------------------------
    #def plotShpPolygonByFile(self,file_path):
        #""""""
        #shape_BLL.shapely_polygon.plotShpByFile(self.axes, file_path)
        #self.axes.set_title('polygon')  
        #self.axes.set_axis_off()
        #self.canvas.draw()           
        #pass
        
    #def clear(self):
        #self.figure.set_canvas(self.canvas)
        #self.axes.clear()
        #self.canvas.draw() """
        
        
class DB_search(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DB_search.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        choice = ["1990","1991","1992","1993","1994","1995","1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010"]
        self.label_2 = wx.StaticText(self, wx.ID_ANY, "time", style=wx.ALIGN_RIGHT | wx.ALIGN_CENTRE)
        self.combo_box_1 = wx.ComboBox(self, wx.ID_ANY, choices=choice, style=wx.CB_DROPDOWN)
        self.choose_botton = wx.Button(self, wx.ID_ANY, ">>")
        self.del_botton = wx.Button(self, wx.ID_ANY, "<<")
        self.list_box_4 = wx.ListBox(self, wx.ID_ANY, choices=[])
        self.sizer_33_staticbox = wx.StaticBox(self, wx.ID_ANY, "time_range")
        self.zoomin_slid = wx.Slider(self, 100, 1, 1, 100, pos=(10, 10),  
                size=(-1, 250),  
                style=wx.SL_VERTICAL | wx.SL_AUTOTICKS | wx.SL_LABELS )  

        self.zoomin_slid.SetTickFreq(33, 1)  #wx.Slider(self, wx.ID_ANY, 0, 0, 10, style=wx.SL_VERTICAL)
        self.zoomout_slid =wx.Slider(self, 100, 1, 1, 100, pos=(10,10), size=(250,-1), 
            style= wx.SL_HORIZONTAL | wx.SL_AUTOTICKS | wx.SL_LABELS 
            )
        self.zoomout_slid.SetTickFreq(33, 1)#wx.Slider(self, wx.ID_ANY, 0, 0, 10)
        self.show_shp = show_shapefile.sketchWindow(self, wx.ID_ANY)
        self.sizer_34_staticbox = wx.StaticBox(self, wx.ID_ANY, "space_range")
        self.sure_botton = wx.Button(self, wx.ID_ANY, "sure")
        self.cancel_botton = wx.Button(self, wx.ID_ANY, "cancel")
        self.sizer_29_staticbox = wx.StaticBox(self, wx.ID_ANY, "DB_search")

        self.__set_properties()
        self.__do_layout()
        
        self.Bind(wx.EVT_SCROLL_PAGEUP,self.OnSpinUp1,self.zoomin_slid)   
        self.Bind(wx.EVT_SCROLL,self.OnSpinDown1,self.zoomin_slid) 
        
        self.Bind(wx.EVT_SCROLL_PAGEUP,self.OnSpinUp2,self.zoomout_slid)   
        self.Bind(wx.EVT_SCROLL_PAGEDOWN,self.OnSpinDown2,self.zoomout_slid) 
        
        self.Bind(wx.EVT_BUTTON, self.choose_btn, self.choose_botton)
        self.Bind(wx.EVT_BUTTON, self.del_btn, self.del_botton)
        self.Bind(wx.EVT_BUTTON, self.sure_btn, self.sure_botton)
        self.Bind(wx.EVT_BUTTON, self.cancel_btn, self.cancel_botton)
        # end wxGlade
        
        path_china = r"E:\lab\Paper\Data\country_shp\bou1_4l.shp"    
        self.show_shp.addLayer(path_china, wx.Pen("black",2,wx.SOLID),wx.Brush('blue'))

    def __set_properties(self):
        # begin wxGlade: DB_search.__set_properties
        self.SetTitle("DB_search")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("E:\\Test\\Icons\\cube\\203.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((700, 400))
        self.SetBackgroundColour(wx.Colour(240, 240, 240))
        self.choose_botton.SetMinSize((40, 22))
        self.del_botton.SetMinSize((40, 22))
        # end wxGlade
        

        
    def __do_layout(self):
        # begin wxGlade: DB_search.__do_layout
        sizer_28 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_29_staticbox.Lower()
        sizer_29 = wx.StaticBoxSizer(self.sizer_29_staticbox, wx.HORIZONTAL)
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_34_staticbox.Lower()
        sizer_34 = wx.StaticBoxSizer(self.sizer_34_staticbox, wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_33_staticbox.Lower()
        sizer_33 = wx.StaticBoxSizer(self.sizer_33_staticbox, wx.VERTICAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39 = wx.BoxSizer(wx.VERTICAL)
        sizer_36 = wx.BoxSizer(wx.VERTICAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37.Add(self.label_2, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_37.Add(self.combo_box_1, 2, 0, 0)
        sizer_36.Add(sizer_37, 1, wx.EXPAND, 0)
        sizer_33.Add(sizer_36, 1, wx.EXPAND, 0)
        sizer_39.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_39.Add(self.choose_botton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_39.Add(self.del_botton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_39.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_38.Add(sizer_39, 1, wx.EXPAND, 0)
        sizer_38.Add(self.list_box_4, 2, wx.EXPAND, 0)
        sizer_33.Add(sizer_38, 8, wx.EXPAND, 0)
        sizer_32.Add(sizer_33, 1, wx.EXPAND, 0)
        sizer_34.Add(self.zoomin_slid, 0, wx.EXPAND, 0)
        sizer_35.Add(self.zoomout_slid, 0, wx.EXPAND, 0)
        sizer_35.Add(self.show_shp, 1, wx.EXPAND, 0)
        sizer_34.Add(sizer_35, 1, wx.EXPAND, 0)
        sizer_32.Add(sizer_34, 7, wx.EXPAND, 0)
        sizer_30.Add(sizer_32, 1, wx.EXPAND, 0)
        sizer_31.Add((20, 20), 2, 0, 0)
        sizer_31.Add(self.sure_botton, 0, 0, 0)
        sizer_31.Add(self.cancel_botton, 0, 0, 0)
        sizer_30.Add(sizer_31, 0, wx.EXPAND, 0)
        sizer_29.Add(sizer_30, 1, wx.EXPAND, 0)
        sizer_28.Add(sizer_29, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_28)
        self.Layout()
        
    # end wxGlade
    #----------------------------------------------------------------------
    def OnSpinDown1(self, event):
        """"""
        value = self.zoomin_slid.GetValue()
        if value == 1:
            self.show_shp.zoom_all()
        elif value == 33:
            self.show_shp.zoom_in()
        elif value == 50 :
            self.show_shp.zoom_in()
        elif value == 66 :
            self.show_shp.zoom_in()
        elif value == 100:
            self.show_shp.zoom_in()           
        else:
            pass        
        
    #----------------------------------------------------------------------
    def OnSpinUp1(self, event):
        """"""
        value = self.zoomin_slid.GetValue()
        if value == 1:
            self.show_shp.zoom_all()
        elif value == 33:
            self.show_shp.zoom_out()
        elif value == 50 :
            self.show_shp.zoom_out()
        elif value == 66 :
            self.show_shp.zoom_out()
        elif value == 100:
            pass #self.show_shp.zoom_out()           
        else:
            pass        
        
    #----------------------------------------------------------------------
    def OnSpinUp2(self, event):
        """"""
        value = self.zoomin_slid.GetValue()
        if value == 1:
            self.show_shp.zoom_all()
        elif value == 33:
            self.show_shp.move((30,0))
        elif value == 50 :
            self.show_shp.move((60,0))
        elif value == 66 :
            self.show_shp.move((90,0))
        elif value == 100:
            self.show_shp.move((120,0))       
        else:
            pass                
        pass
    #----------------------------------------------------------------------
    def OnSpinDown2(self, event):
        """"""   
        pass
    
    def OnSlider(self, event):       
        value = self.zoomin_slid.GetValue()
        path_china = r"E:\lab\Paper\Data\china_basic_map\bou2_4p.shp"      
        path_china_town = r"E:\lab\Paper\Data\triangle\china_town.shp"  
        triangle = r"E:\lab\Paper\Data\triangle\triangle.shp"
        path_js_city = r"E:\lab\Paper\Data\jiangsu_shp\JS_city.shp"      
        path_js_town = r"E:\lab\Paper\Data\jiangsu_shp\JS_town.SHP"      

        if value == 1:
            #self.show_shp
            #self.show_shp.zoomIn()
            self.show_shp.zoom_all()
            #self.show_shp.addLayer(path_china, wx.Pen("black",2,wx.SOLID),wx.Brush('blue'))
            #self.map_panel.plotShpPolygonByFile(path_china)
        elif value == 33:
            #self.show_shp.clear()
            self.show_shp.zoom_in()
            #self.show_shp.addLayer(path_china_town, wx.Pen("black",2,wx.SOLID),wx.Brush('blue'))
            #self.map_panel.plotShpPolygonByFile(path_china_town)
        elif value == 50 :
            #self.show_shp.clear()
            self.show_shp.zoomIn()
            #self.show_shp.addLayer(triangle, wx.Pen("black",2,wx.SOLID),wx.Brush('blue'))
            #self.map_panel.plotShpPolygonByFile(path_tri)
        elif value == 66 :
            #self.show_shp.clear()
            self.show_shp.zoomIn()
            #self.show_shp.addLayer(path_js_city, wx.Pen("black",2,wx.SOLID),wx.Brush('blue'))
            #self.map_panel.plotShpPolygonByFile(path_js_city)
        elif value == 100:
            #self.show_shp.clear()
            self.show_shp.zoomIn()
            #self.show_shp.addLayer(path_js_town, wx.Pen("black",2,wx.SOLID),wx.Brush('blue'))
            #self.map_panel.plotShpPolygonByFile(path_js_town)
            
        else:
            pass
            

    def choose_btn(self, event):  # wxGlade: DB_search.<event_handler>
        print "Event handler 'choose_btn' not implemented!"
        time_value = self.combo_box_1.GetValue()
        self.list_box_4.Append(time_value)
        event.Skip()

    def del_btn(self, event):  # wxGlade: DB_search.<event_handler>
        print "Event handler 'del_btn' not implemented!"
        time_value = self.list_box_4.GetSelection()
        self.list_box_4.Delete(time_value)
        event.Skip()

    def sure_btn(self, event):  # wxGlade: DB_search.<event_handler>
        print "Event handler 'sure_btn' not implemented!"
        event.Skip()

    def cancel_btn(self, event):  # wxGlade: DB_search.<event_handler>
        print "Event handler 'cancel_btn' not implemented!"
        self.Close()
        event.Skip()

# end of class DB_search
 
        
        
if __name__ == "__main__":
    #gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    #wx.InitAllImageHandlers()
    frame_1 = DB_search(None)
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()